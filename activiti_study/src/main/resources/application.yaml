server:
  port: 8124

spring:
  datasource:
    url: jdbc:mysql://localhost:3306/wdw?characterEncoding=utf-8&useUnicode=true&useSSL=false&serverTimezone=UTC
    password: wdw1996
    username: wdw
    driver-class-name: com.mysql.cj.jdbc.Driver
    type: com.alibaba.druid.pool.DruidDataSource  #当前数据源操作类型
    druid:
#      aop-patterns: com.fan.admin.*  #监控springbean
      filters: stat,wall  #底层开启功能，stat(sql监控)，wall(防火墙)
      stat-view-servlet: #配置监控页功能
        enabled: true
        login-username: admin
        login-password: 123456
        reset-enable: false
      web-stat-filter: #监控web
        enabled: true
        url-pattern: /*
        exclusions: '*.js,*.gif,*.jpg,*.png,*.css,*.ico,/druid/*'
      filter: #对上面filter里面的stat的详细配置，防火墙的配置
        stat:
          slow-sql-millis: 1000
          log-slow-sql: true
          enabled: true
        wall:
          enabled: true
          config:
            drop-table-allow: false  #不允许删表
      initial-size: 5  #初始化大小
      min-idle: 5  # 最小空闲连接个数
      max-active: 20    # 最大连接个数
      max-wait: 60000   # 配置获取连接等待超时的时间
      time-between-eviction-runs-millis: 60000    # 配置间隔多久才进行一次监测，监测需要关闭的空闲连接，单位时毫秒
      min-evictable-idle-time-millis: 60000       # 配置一个连接在池中最小生存的时间
      validation-query: select 'x'                # 用来监测连接是否有效的sql，要求是一个查询语句
      test-while-idle: true            # 建议配置为true，不影响性能，并且保证安全性。如果空闲时间大于timeBetweenEvictionRunsMillis，执行validationQuery检测连接是否有效。
      test-on-borrow: false            # 申请连接时执行validationQuery检测连接是否有效，做了这个配置会降低性能
      test-on-return: false            # 归还连接时执行validationQuery检测连接是否有效，做了这个配置会降低性能
      pool-prepared-statements: true   # 打开PSCache，并且指定每个连接上PSCache的大小
      max-open-prepared-statements: 20
      remove-abandoned: true   # 打开 长时间未关闭的连接功能
      remove-abandoned-timeout: 1800   # 30分钟连接未关闭则强行关闭
      log-abandoned: true    # 关闭连接时输出错误日志信息
  activiti:
    #自动更新数据库结构
    #1.flase：默认值。activiti在启动时，对比数据库表中保存的版本，如果没有表或者版本不匹配，将抛出异常
    #2.true： activiti会对数据库中所有表进行更新操作。如果表不存在，则自动创建
    #3.create_drop： 在activiti启动时创建表，在关闭时删除表（必须手动关闭引擎，才能删除表）
    #4.drop-create： 在activiti启动时删除原来的旧表，然后在创建新表（不需要手动关闭引擎）
    database-schema-update: true
      #activiti7默认不生成历史信息表，开启历史表
    db-history-used: true
    #记录历史等级 可配置的历史级别有none, activity, audit, full
    #none：不保存任何的历史数据，因此，在流程执行过程中，这是最高效的。
    #activity：级别高于none，保存流程实例与流程行为，其他数据不保存。
    #audit：除activity级别会保存的数据外，还会保存全部的流程任务及其属性。audit为history的默认值。
    #full：保存历史数据的最高级别，除了会保存audit级别的数据外，还会保存其他全部流程相关的细节数据，包括一些流程参数等。
    history-level: full
    # =============================
    #自动检查、部署流程定义文件
    check-process-definitions: false
    # asyncExecutorActivate是指activiti在流程引擎启动就激活AsyncExecutor,异步：true-开启（默认）、false-关闭
    async-executor-activate: true
    #流程定义文件存放目录,要具体到某个目录
    process-definition-location-prefix: classpath:/processes/
    #process-definition-location-suffixes: #流程文件格式
    deployment-mode: never-fail
  thymeleaf:
    prefix: classpath:/view/
    cache: false
    mode: LEGACYHTML5
    servlet:
      content-type: text/html

mybatis:
  mapper-locations: classpath*:mapper/**/*.xml


#日志文件配置
logging:
  config: classpath:logback-spring.xml


